version: '3.9'
services:

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    volumes:
      - ./src/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    ports:
      - "5775:5775"
      - "5778:5778"
      - "6831:6831"
      - "6832:6832"
      - "9411:9411"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090

  # Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.52.0
    container_name: otel-col
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./src/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4317"
      - "4318"
      - "9464"
      - "8888:8888"
    depends_on:
      - jaeger

  # Redis
  redis-cart:
    image: redis:alpine
    container_name: redis-cart
    ports:
      - "${REDIS_PORT}"

  # AdService
  adservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-adservice
    container_name: ad-service
    ports:
      - "${AD_SERVICE_PORT}"
    environment:
      - AD_SERVICE_PORT
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=adservice
    depends_on:
      - otelcol

  # CartService
  cartservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-cartservice
    container_name: cart-service
    ports:
      - "${CART_SERVICE_PORT}"
    environment:
      - CART_SERVICE_PORT
      - REDIS_ADDR
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=cartservice
      - ASPNETCORE_URLS=http://*:${CART_SERVICE_PORT}
    depends_on:
      - redis-cart
      - otelcol

  # CheckoutService
  checkoutservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-checkoutservice
    container_name: checkout-service
    ports:
      - "${CHECKOUT_SERVICE_PORT}"
    environment:
      - CHECKOUT_SERVICE_PORT
      - CART_SERVICE_ADDR
      - CURRENCY_SERVICE_ADDR
      - EMAIL_SERVICE_ADDR
      - PAYMENT_SERVICE_ADDR
      - PRODUCT_CATALOG_SERVICE_ADDR
      - SHIPPING_SERVICE_ADDR
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=checkoutservice
    depends_on:
      - cartservice
      - currencyservice
      - emailservice
      - paymentservice
      - productcatalogservice
      - shippingservice
      - otelcol

  # CurrencyService
  currencyservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-currencyservice
    container_name: currency-service
    ports:
      - "${CURRENCY_SERVICE_PORT}"
    environment:
      - PORT=${CURRENCY_SERVICE_PORT}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=currencyservice
    depends_on:
      - otelcol

  # EmailService
  emailservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-emailservice
    container_name: email-service
    ports:
      - "${EMAIL_SERVICE_PORT}"
    environment:
      - APP_ENV=production
      - PORT=${EMAIL_SERVICE_PORT}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otelcol:4318/v1/traces
      - OTEL_RESOURCE_ATTRIBUTES=service.name=emailservice
    depends_on:
      - otelcol

  # Frontend
  frontend:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-frontend
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - FRONTEND_ADDR
      - AD_SERVICE_ADDR
      - CART_SERVICE_ADDR
      - CHECKOUT_SERVICE_ADDR
      - CURRENCY_SERVICE_ADDR
      - PRODUCT_CATALOG_SERVICE_ADDR
      - RECOMMENDATION_SERVICE_ADDR
      - SHIPPING_SERVICE_ADDR
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT
    depends_on:
      - adservice
      - cartservice
      - checkoutservice
      - currencyservice
      - otelcol
      - productcatalogservice
      - recommendationservice
      - shippingservice

  # PaymentService
  paymentservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-paymentservice
    container_name: payment-service
    ports:
      - "${PAYMENT_SERVICE_PORT}"
    environment:
      - PAYMENT_SERVICE_PORT
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=paymentservice
    depends_on:
      - otelcol

  # ProductCatalogService
  productcatalogservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-productcatalogservice
    container_name: product-catalog-service
    ports:
      - "${PRODUCT_CATALOG_SERVICE_PORT}"
    environment:
      - PRODUCT_CATALOG_SERVICE_PORT
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=productcatalogservice
    depends_on:
      - otelcol

  # RecommendationService
  recommendationservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-recommendationservice
    container_name: recommendation-service
    ports:
      - "${RECOMMENDATION_SERVICE_PORT}"
    depends_on:
      - productcatalogservice
      - otelcol
    environment:
      - RECOMMENDATION_SERVICE_PORT
      - PRODUCT_CATALOG_SERVICE_ADDR
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=recommendationservice

  # ShippingService
  shippingservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-shippingservice
    container_name: shipping-service
    ports:
      - "${SHIPPING_SERVICE_PORT}"
    environment:
      - PORT=${SHIPPING_SERVICE_PORT}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=shippingservice
    depends_on:
      - otelcol

  # FeatureFlagService
  featureflagservice:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-featureflagservice
    container_name: feature-flag-service
    ports:
      - "${FEATURE_FLAG_SERVICE_PORT}:${FEATURE_FLAG_SERVICE_PORT}"
      - "${FEATURE_FLAG_GRPC_SERVICE_PORT}"
    environment:
      - PORT=${FEATURE_FLAG_SERVICE_PORT}
      - GRPC_PORT=${FEATURE_FLAG_GRPC_SERVICE_PORT}
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=featureflagservice
      - DATABASE_URL=ecto://ffs:ffs@ffs_postgres:5432/ffs
    depends_on:
      - ffs_postgres

  ffs_postgres:
    image: cimg/postgres:14.2
    container_name: postgres
    environment:
      - POSTGRES_USER=ffs
      - POSTGRES_DB=ffs
      - POSTGRES_PASSWORD=ffs

  # LoadGenerator
  loadgenerator:
    image: ghcr.io/open-telemetry/demo:v0.2.0-alpha-loadgenerator
    container_name: load-generator
    environment:
      - FRONTEND_ADDR
      - USERS
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
      - OTEL_RESOURCE_ATTRIBUTES=service.name=loadgenerator
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    depends_on:
      - frontend

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"

  # Grafana
  grafana:
    image: grafana/grafana:9.0.1
    container_name: grafana
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
