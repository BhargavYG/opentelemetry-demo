dash0_configuration_dir=../../../dash0-configuration

# Switches to the local Kubernetes context (docker-desktop by default) and sets
# the variable original_context to the previously active context name.
function switch_to_local_context {
  original_context=$(kubectx --current)
  local_context=docker-desktop
  if [[ -n ${LOCAL_KUBERNETES_CONTEXT:-} ]]; then
    local_context=$LOCAL_KUBERNETES_CONTEXT
  fi
  echo "switching to Kubernetes context $local_context"
  kubectx $local_context
}

# Switches back to the orignal local Kubernetes context that was active before
# switch_to_local_context had been called.
function switch_back_to_original_context {
  if [[ -z $original_context ]]; then
    echo "Error: switch_back_to_original_context requires that switch_to_local_context has been called earlier."
    exit 1
  fi
  echo "switching back to Kubernetes context $original_context"
  kubectx $original_context
}

function git_pull_dash0_configuration {
  if [[ ! -e $dash0_configuration_dir ]]; then
    echo Error: expected $dash0_configuration_dir to exist, but it does not.
    exit 1
  fi
  echo executing git pull in $dash0_configuration_dir
  pushd $dash0_configuration_dir > /dev/null
  git pull
  popd > /dev/null
}

function refresh_image_pull_secret {
  echo
  echo "Note: You might need to execute \"aws sso login\" before trying to deploy."
  echo
  namespaces=("$@")
  aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 718306648796.dkr.ecr.eu-west-1.amazonaws.com
  for n in "${namespaces[@]}"; do
    if kubectl get namespaces --show-labels -l  kubernetes.io/metadata.name=$n | grep $n; then
      echo "namespace $n exists"
    else
      echo "creating namespace $n"
      kubectl create namespace $n
    fi
    echo "recreating image pull secret in namespace $n"
    kubectl delete secret --namespace=$n --ignore-not-found regcred
    kubectl create secret docker-registry regcred --namespace=$n --docker-server=718306648796.dkr.ecr.eu-west-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region eu-west-1 --profile Demo_Dash0DeveloperAssumeRole)
  done
}

